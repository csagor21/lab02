# -*- coding: utf-8 -*-
"""Task-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IqGSxgXuqLetL_G6EzPPHO7Qhv4VMQnX
"""

import matplotlib.pyplot as plt
import random

class TradingAgent:
    def __init__(self, average_price, critical_stock_level=10, default_order_quantity=15):
        self.average_price = average_price
        self.critical_stock_level = critical_stock_level
        self.default_order_quantity = default_order_quantity

    def decide_order(self, current_price, current_stock):
        # Calculate price threshold (20% discount)
        price_threshold = 0.8 * self.average_price

        # Decision Process
        if current_stock < self.critical_stock_level:
            # Critical stock level: prioritize restocking
            tobuy = max(self.critical_stock_level - current_stock, 10)
        elif current_price < price_threshold and current_stock >= self.critical_stock_level:
            # Price drop and stock is sufficient: take advantage of the deal
            tobuy = self.default_order_quantity
        else:
            # No need to place an order
            tobuy = 0

        return tobuy

# Example usage with random scenarios
average_price = 600  # Average price of the smartphone
agent = TradingAgent(average_price=average_price)

# Generate random prices and stock levels
random.seed(42)  # Set seed for reproducibility
prices = [random.randint(100, 600) for _ in range(10)]  # Random prices between 400 and 800
stocks = [random.randint(0, 20) for _ in range(10)]  # Random stock levels between 0 and 20

orders = []  # To store the order quantities
for price, stock in zip(prices, stocks):
    order_quantity = agent.decide_order(price, stock)
    orders.append(order_quantity)

# Visualization
plt.figure(figsize=(10, 6))
plt.plot(prices, label='Price', marker='o')
plt.plot(stocks, label='Stock Level', marker='o')
plt.plot(orders, label='Order Quantity', marker='o', linestyle='--')

plt.title("Trading Agent Decision Visualization (Randomized Scenarios)")
plt.xlabel("Scenario Index")
plt.ylabel("Values")
plt.legend()
plt.grid(True)
plt.show()